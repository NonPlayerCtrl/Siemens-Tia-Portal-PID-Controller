FUNCTION_BLOCK "fb_PI-Regler_V15.0.1"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      ir_Istwert { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;   // Istwert
      ir_Sollwert { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;   // Sollwert
      ir_ProportionalVerstärkung { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 20.0;   // Proportional-Verstärkung
      ir_IntegralVerstärkung { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 5.0;   // Integral-Verstärkung
      ir_UnteresLimit { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 0.0;   // unteres Limit
      ir_OberesLimit { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 100.0;   // oberes Limit
      ib_Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := FALSE;   // Reset
   END_VAR

   VAR_OUTPUT 
      or_Reglerantwort { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;   // Regler Ausgang
   END_VAR

   VAR 
      StaticZyklusZeit_Aux { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
      Reglerantwort_Integral { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      Reglerantwort_Proportional { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      VergangeneZeit { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;   // in s
   END_VAR


BEGIN
	//read elpsed Time in s since last Time*)
	#VergangeneZeit := LREAL_TO_REAL(RUNTIME(#StaticZyklusZeit_Aux));
	//initialize at power_up
	IF #ib_Reset THEN
	    #Reglerantwort_Integral := 0.0;
	    #or_Reglerantwort := 0.0;
	ELSE
	     // calculate proportional part 
	     #Reglerantwort_Proportional := #ir_ProportionalVerstärkung * (#ir_Sollwert - #ir_Istwert);
	     //run integrator only IF Time makes sens 
	     IF #VergangeneZeit > 0 AND #VergangeneZeit < 0.1 THEN
	         #Reglerantwort_Integral += #ir_IntegralVerstärkung * (#ir_Sollwert - #ir_Istwert) * #VergangeneZeit;
	     END_IF;
	     // calculate output  
	     #or_Reglerantwort := #Reglerantwort_Proportional + #Reglerantwort_Integral;
	     // check output FOR limits
	     IF #or_Reglerantwort >= #ir_OberesLimit THEN
	         #or_Reglerantwort := #ir_OberesLimit;
	         #Reglerantwort_Integral := #ir_OberesLimit - #Reglerantwort_Proportional;
	     ELSIF #or_Reglerantwort <= #ir_UnteresLimit THEN
	         #or_Reglerantwort := #ir_UnteresLimit;
	         #Reglerantwort_Integral := #ir_UnteresLimit - #Reglerantwort_Proportional;
	        END_IF;
	    END_IF;
	    
	    
END_FUNCTION_BLOCK

